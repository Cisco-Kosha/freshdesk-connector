basePath: /
definitions:
  models.Account:
    properties:
      account_domain:
        type: string
      account_id:
        type: integer
      account_name:
        type: string
      address:
        properties:
          city:
            type: string
          country:
            type: string
          postalcode:
            type: string
          state:
            type: string
          street:
            type: string
        type: object
      bundle_id: {}
      contact_person:
        properties:
          email:
            type: string
          firstname:
            type: string
          lastname:
            type: string
        type: object
      data_center:
        type: string
      hipaa_compliant:
        type: boolean
      organisation_id:
        type: integer
      organisation_name:
        type: string
      tier_type:
        type: string
      timezone:
        type: string
      total_agents:
        properties:
          collaborators:
            type: integer
          field_service:
            type: integer
          full_time:
            type: integer
          occasional:
            type: integer
        type: object
    type: object
  models.Agent:
    properties:
      available:
        type: boolean
      available_since:
        type: string
      contact:
        properties:
          active:
            type: boolean
          created_at:
            type: string
          email:
            type: string
          job_title:
            type: string
          language:
            type: string
          last_login_at: {}
          mobile: {}
          name:
            type: string
          phone:
            type: string
          time_zone:
            type: string
          updated_at:
            type: string
        type: object
      created_at:
        type: string
      id:
        type: integer
      last_active_at:
        type: string
      occasional:
        type: boolean
      signature:
        type: string
      ticket_scope:
        type: integer
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.AllTickets:
    properties:
      closed_tickets:
        $ref: '#/definitions/models.ClosedTickets'
      open_tickets:
        $ref: '#/definitions/models.OpenTickets'
      pending_tickets:
        $ref: '#/definitions/models.PendingTickets'
      resolved_tickets:
        $ref: '#/definitions/models.ResolvedTickets'
    type: object
  models.ClosedTickets:
    properties:
      tickets:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      total:
        type: integer
    type: object
  models.Group:
    properties:
      agent_ids:
        items:
          type: integer
        type: array
      allow_agents_to_change_availability:
        type: boolean
      automatic_agent_assignment:
        properties:
          enabled:
            type: boolean
        type: object
      business_calendar_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      escalate_to:
        type: integer
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      unassigned_for:
        type: string
      updated_at:
        type: string
    type: object
  models.OpenTickets:
    properties:
      tickets:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      total:
        type: integer
    type: object
  models.PendingTickets:
    properties:
      tickets:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      total:
        type: integer
    type: object
  models.ResolvedTickets:
    properties:
      tickets:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      total:
        type: integer
    type: object
  models.SearchResults:
    properties:
      results:
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      total:
        type: integer
    type: object
  models.Specification:
    properties:
      api_key:
        type: string
      domain_name:
        type: string
    type: object
  models.Ticket:
    properties:
      associated_tickets_count: {}
      association_type: {}
      attachments:
        items: {}
        type: array
      cc_emails:
        items:
          type: string
        type: array
      company:
        type: object
      company_id:
        type: integer
      created_at:
        type: string
      custom_fields:
        type: object
      description:
        type: string
      description_text:
        type: string
      due_by:
        type: string
      email:
        type: string
      email_config_id:
        type: integer
      fr_due_by:
        type: string
      fr_escalated:
        type: boolean
      fwd_emails:
        items:
          type: string
        type: array
      group_id:
        type: integer
      id:
        type: integer
      is_escalated:
        type: boolean
      nr_due_by: {}
      nr_escalated:
        type: boolean
      priority: {}
      product_id:
        type: integer
      reply_cc_emails:
        items:
          type: string
        type: array
      requester:
        properties:
          email:
            type: string
          id:
            type: integer
          mobile:
            type: integer
          name:
            type: string
          phone:
            type: string
        type: object
      requester_id:
        type: integer
      responder_id:
        type: integer
      source: {}
      source_additional_info: {}
      spam:
        type: boolean
      stats:
        properties:
          agent_responded_at: {}
          closed_at: {}
          first_responded_at: {}
          pending_since: {}
          reopened_at: {}
          requester_responded_at: {}
          resolved_at: {}
          status_updated_at:
            type: string
        type: object
      status: {}
      subject:
        type: string
      support_email: {}
      tags:
        items:
          type: string
        type: array
      ticket_cc_emails:
        items:
          type: string
        type: array
      to_emails:
        items:
          type: string
        type: array
      twitter_id:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8015
info:
  contact:
    email: eti@cisco.io
    name: API Support
  description: This is a Kosha REST serice for exposing many freshdesk features as
    REST APIs with better consistency, observability etc
  termsOfService: http://swagger.io/terms/
  title: Freshdesk Connector API
  version: "2.0"
paths:
  /api/v1/account:
    get:
      consumes:
      - application/json
      description: List account metadata
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Account'
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get account detail
      tags:
      - account
  /api/v1/agents:
    get:
      consumes:
      - application/json
      description: List all agents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Agent'
            type: array
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get freshdesk agents
      tags:
      - agents
  /api/v1/groups:
    get:
      consumes:
      - application/json
      description: List all groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Group'
            type: array
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get groups detail
      tags:
      - groups
  /api/v1/search:
    get:
      consumes:
      - application/json
      description: Search tickets by passing various query parameters
      parameters:
      - description: Enter query parameter e.g., priority:>2 (in quotes)
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchResults'
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Search tickets
      tags:
      - search
  /api/v1/specification/list:
    get:
      consumes:
      - application/json
      description: Get all environment variables that need to be supplied
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get details of the connector specification
      tags:
      - specification
  /api/v1/specification/test:
    post:
      consumes:
      - application/json
      description: Check if domain account can be verified
      parameters:
      - description: Enter api key and domain name properties
        in: body
        name: text
        schema:
          $ref: '#/definitions/models.Specification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Account'
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Test if API key and domain name work against the specification
      tags:
      - specification
  /api/v1/stats/agent/{agent_id}:
    get:
      consumes:
      - application/json
      description: Get ticket statistics for a particular agent id
      parameters:
      - description: Enter agent id
        in: path
        name: agent_id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllTickets'
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get ticket statistics for a particular agent
      tags:
      - statistics
  /api/v1/stats/date/{created_at}:
    get:
      consumes:
      - application/json
      description: Get ticket statistics for tickets created since a particular date
      parameters:
      - description: Enter created_at
        in: path
        name: created_at
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllTickets'
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get ticket statistics for tickets created since a particular date
      tags:
      - statistics
  /api/v1/stats/group/{group_id}:
    get:
      consumes:
      - application/json
      description: Get ticket statistics for a particular group id
      parameters:
      - description: Enter group id
        in: path
        name: group_id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllTickets'
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get ticket statistics for a particular group
      tags:
      - statistics
  /api/v1/tickets:
    get:
      consumes:
      - application/json
      description: List all tickets logged in the system
      parameters:
      - description: Page number
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ticket'
            type: array
      summary: Get all tickets
      tags:
      - tickets
    post:
      consumes:
      - application/json
      description: Create single ticket in the system
      parameters:
      - description: Enter ticket properties
        in: body
        name: text
        schema:
          $ref: '#/definitions/models.Ticket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Create new ticket
      tags:
      - tickets
  /api/v1/tickets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete single ticket based on the ticket id logged in the system
      parameters:
      - description: Enter ticket id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Delete single ticket
      tags:
      - tickets
    get:
      consumes:
      - application/json
      description: List single ticket based on the ticket id logged in the system
      parameters:
      - description: Enter ticket id
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: permission denied
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get single ticket
      tags:
      - tickets
swagger: "2.0"
